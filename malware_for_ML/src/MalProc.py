import argparse
import sys
import os

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-M', '--mode', required=True, type=str, help="The mode to process. (extraction, encoding, merge, classification)")
    parser.add_argument('-j', '--njobs', required=False, default=1, type=int, help="The number of process to work")

    # Default Argument
    parser.add_argument('-i', '--input', required=False, type=str, help='The file path to process. it retrieve paths recursively')
    parser.add_argument('-o', '--output', required=False, type=str, help='The file path to save result.')

    # Feature Extraction Argument
    parser.add_argument('-f', '--feature', required=False, type=str, help='The one feature type to extract.')

    # Feature Selection Argument
    parser.add_argument('-S', '--selection', required=False, default='randomforest', type=str, help='feature selection method')

    # Encoding Argument
    parser.add_argument('-s', '--sampling', required=False, type=float, help='The percentage of samples')

    # Merge Argument
    parser.add_argument('-e', '--encodingConf', required=False, type=str, help='The encoding configure file path.')
    parser.add_argument('-n', '--nameEncoderPath', required=False, type=str, help='The name encoder configure file path.')

    args = vars(parser.parse_args())

    mode = args['mode']

    njobs = args['njobs']

    from util.util import read_setting_configure
    setting_property = read_setting_configure('../conf/settings.conf')

    print setting_property

    inputPath = args['input']
    outputPath = args['output']

    job_dir = os.path.join(setting_property['base_directory'] , \
                         setting_property['output_directory'] , \
                         setting_property['job_id'])

    if not os.path.exists(job_dir):
        os.makedirs(job_dir)

    if mode == 'extraction':
        feature = args['feature']

        featureList = list()

        if feature is  None:
            from util.util import read_feature_configure
            featureList = read_feature_configure(setting_property['base_directory'] + setting_property['conf_directory'] + setting_property['features_conf_name'])
        else:
            featureList = [feature]

        if inputPath is None:
            print '[ERROR] you must specify inputPath'
            sys.exit(0)

        from preprocessing.FeatureManager import FeatureManager
        featureManager = FeatureManager(inputPath,featureList,njobs)
        featureManager.extract_units()
        featureManager.collect()

    elif mode == 'labeling':
        from encoding.NameEncoder import NameEncoder

        # nameEncoder = NameEncoder(malwarePath, benignPath)
        nameEncoder = NameEncoder(inputPath)
        nameEncoder.generate()

        if outputPath is None:
            outputPath = os.path.join(setting_property['base_directory'] , \
                         setting_property['output_directory'] , \
                         setting_property['job_id'] , setting_property['job_id'])+'.csv'

        nameEncoder.saveAsCSV(outputPath)
        print '[INFO] output saved to %s' % outputPath

    elif mode == 'selection':
        from util.util import read_encoding_configure, load_encoder
        from selection.FeatureSelector import FeatureSelector

        nameEncoderPath = args['nameEncoderPath']
        method = args['selection']

        if nameEncoderPath is None:
            print '[WARN] Name encoder path is not typed.'
            print '[INFO] Name encoder path is set to default path.'
            nameEncoderPath = os.path.join(setting_property['base_directory'], \
                                           setting_property['output_directory'], \
                                           setting_property['job_id'], setting_property['job_id']) + '.csv'

        file_name = os.path.basename(inputPath).split('.')[0]

        if outputPath is None:
            outputPath = os.path.join(setting_property['base_directory'] , \
                         setting_property['output_directory'] , \
                         setting_property['job_id'] , file_name)+'_selected.spa'

        nameEncoder = load_encoder(nameEncoderPath, header=False)
        featureSelector = FeatureSelector(inputPath, outputPath, nameEncoder, method=method)
        featureSelector.select()

    elif mode == 'mergence':
        from util.util import read_encoding_configure, load_encoder
        from mergence.FeatureMergence import FeatureMergence

        nameEncoderPath = args['nameEncoderPath']

        if nameEncoderPath is None:
            print '[WARN] Name encoder path is not typed.'
            print '[INFO] Name encoder path is set to default path.'
            nameEncoderPath = os.path.join(setting_property['base_directory'], \
                                           setting_property['output_directory'], \
                                           setting_property['job_id'], setting_property['job_id']) + '.csv'

        file_name = os.path.basename(inputPath).split('.')[0]

        if outputPath is None:
            outputPath = os.path.join(setting_property['base_directory'], \
                                      setting_property['output_directory'], \
                                      setting_property['job_id'], setting_property['job_id']) + '_merged.spa'

        nameEncoder = load_encoder(nameEncoderPath, header=False)
        featureMergence = FeatureMergence(inputPath, outputPath, nameEncoder)
        featureMergence.load()
        featureMergence.merge()
        featureMergence.save_to_spa()


    elif mode == 'encoding':
        from util.util import read_encoding_configure, load_encoder
        mergenceConfPath = setting_property['base_directory'] + setting_property['conf_directory'] + setting_property['mergence_conf_name']
        encodingList = read_encoding_configure(mergenceConfPath)

        nameEncoderPath = args['nameEncoderPath']
        sample_ratio = args['sampling']

        if nameEncoderPath is None:
            print '[WARN] Name encoder path is not typed.'
            print '[INFO] Name encoder path is set to default path.'
            nameEncoderPath = os.path.join(setting_property['base_directory'] , \
                         setting_property['output_directory'] , \
                         setting_property['job_id'] , setting_property['job_id'])+'.csv'

        nameEncoder = load_encoder(nameEncoderPath,header=False)

        if outputPath is None:
            outputPath = os.path.join(setting_property['base_directory'] , \
                         setting_property['output_directory'] , \
                         setting_property['job_id'] , setting_property['job_id'])+'.spa'

        from encoding.EncodingManager import EncodingManager
        encodingManager = EncodingManager(inputPath, outputPath, encodingList, nameEncoder, sample_ratio)
        encodingManager.encode()

        print '[INFO] output saved to %s'%outputPath

    else:
        print '[ERROR] wrong arugment'


if __name__ == '__main__':
    main()
