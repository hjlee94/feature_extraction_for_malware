from util.util import load_spa_to_dict
import numpy as np
import glob
import os
import sys

class FeatureMergence:
    def __init__(self, inputPath, outputPath, nameEncoder):
        self.input_path = inputPath
        self.output_path = outputPath
        self.name_encoder = nameEncoder

        self.all_data_dict = dict()
        self.feature_categorys = list()

        self.max_n_feature = list()
        self.n_data = 0

    def load(self):
        if not os.path.isdir(self.input_path):
            print '[ERROR] The input path of Feature Mergence mode should be directory path, not file path.'
            sys.exit(0)

        paths = glob.glob(os.path.join(self.input_path, '*_selected.spa'))

        print '[INFO] %d spa files detected.'%(len(paths))

        for path in paths:
            data_dict = load_spa_to_dict(path)
            feature_category = os.path.basename(path).split('.')[0].split('_')[0]

            file_names = data_dict.keys()
            self.n_data = len(file_names)

            self.max_n_feature.append(max(map(int,(data_dict[file_names[0]].keys()))))

            self.feature_categorys.append(feature_category)

            self.all_data_dict[feature_category] = data_dict

    def merge(self):
        self.X = np.zeros((self.n_data, sum(self.max_n_feature)))
        self.y = list()

        print '[INFO] merge by order', self.feature_categorys
        print '[INFO] index info',self.max_n_feature

        for i, feature_category in enumerate(self.feature_categorys):
            self.file_names = self.all_data_dict[feature_category].keys()

            for j, file_name in enumerate(self.file_names):
                feature_dict = self.all_data_dict[feature_category][file_name]

                if i == 0:
                    self.y.append(self.name_encoder[file_name])

                for feature in feature_dict:
                    dim = int(feature)
                    val = self.all_data_dict[feature_category][file_name][feature]

                    if i != 0:
                        dim += self.max_n_feature[i-1]

                    self.X[j,dim-1] = val

    def save_to_spa(self):
        print '[INFO] save result to %s'%self.output_path

        fd = open(self.output_path, 'w')
        for i in range(len(self.file_names)):
            feature_data = [self.y[i]]

            for j in range(self.X.shape[1]):
                feature_data.append('%d:%f'%(j+1,self.X[i,j]))

            fd.write(' '.join(feature_data)+'\n')

        fd.close()

