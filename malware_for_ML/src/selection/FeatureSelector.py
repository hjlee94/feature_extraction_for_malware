from util.util import load_spa_to_dict
import numpy as np
import sys
import os

class FeatureSelector:
    def __init__(self,inputPath, outputPath, nameEncoder, method):
        self.inputPath = inputPath
        self.outputPath = outputPath
        self.nameEncoder = nameEncoder
        self.method = method.lower()

        self.feature_encoder = dict()
        self.feature_decoder = dict()
        self.feature_count = 1

        self.n_data = 0

        self.input_dict = None
        self.file_names = list()

        self.X = None
        self.y = None

    def _load_and_encode(self):
        self.input_dict = load_spa_to_dict(self.inputPath)

        self.file_names = self.input_dict.keys()

        for file_name in self.file_names:
            self.n_data += 1

            features = self.input_dict[file_name].keys()

            for feature in features:
                if feature not in self.feature_encoder:
                    self.feature_encoder[feature] = self.feature_count
                    self.feature_decoder[self.feature_count] = feature
                    self.feature_count += 1


    def _convert_to_spa(self):
        self.X = np.zeros((self.n_data, self.feature_count-1))
        self.y = list()

        for i,file_name in enumerate(self.file_names):
            self.y.append(int(self.nameEncoder[file_name]))

            features = self.input_dict[file_name].keys()

            for feature in features:
                dim = self.feature_encoder[feature]
                val = self.input_dict[file_name][feature]
                self.X[i, dim-1] = val

        print '[INFO] Data Shape :',self.X.shape

    def _select_by_random_forest(self):
        from sklearn.ensemble import RandomForestClassifier

        clf = RandomForestClassifier(n_estimators=100, max_depth=15, max_features=0.5)
        clf.fit(self.X,self.y)

        selected_features = np.where(clf.feature_importances_>0)[0]

        print '[INFO] %d->%d features selected.'%(self.feature_count-1, len(selected_features))

        self.feature_info = dict()
        self.feature_info['selected_index'] = list()
        self.feature_info['feature_name'] = list()

        for selected_feature in selected_features:
            self.feature_info['selected_index'].append(int(selected_feature))
            self.feature_info['feature_name'].append(self.feature_decoder[selected_feature+1])

        self.X = self.X[:, selected_features]

    def select(self):
        self._load_and_encode()
        self._convert_to_spa()

        print '[INFO] %s selection method'%self.method

        if self.method == 'randomforest':
            self._select_by_random_forest()

        elif self.method == 'xgboost':
            pass

        else:
            print '[ERROR] Wrong feature selection method'
            sys.exit(0)

        self.save_to_spa()
        self.save_feature_info_to_json()

    def save_to_spa(self):
        fd = open(self.outputPath, 'w')
        for i in range(len(self.file_names)):
            feature_data = [self.file_names[i]]

            for j in range(self.X.shape[1]):
                feature_data.append('%d:%f'%(j+1,self.X[i,j]))

            fd.write(' '.join(feature_data)+'\n')

        fd.close()

    def save_feature_info_to_json(self):
        import json

        (path, name) = os.path.split(self.outputPath)
        name = name.split('.')[0] + '_info.json'
        json_output_path = os.path.join(path,name)

        fd = open(json_output_path, 'w')

        json.dump(self.feature_info, fd)

        fd.close()
