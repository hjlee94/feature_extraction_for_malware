from preprocessing.apics.APIcsUnit import APIcsUnit
import os
import re


class APIcs(APIcsUnit):
    def __init__(self):
        APIcsUnit.__init__(self, self.__class__.__name__)

        self.fileName = None
        self.result = None

        self.MALWARE_DLL = ['User32', 'Kernel32', 'Advapi32', 'Ntdll', 'Ws2_32', 'Wininet',
                            'wsock32', 'Shell32', 'Msvcrt', 'Ole32', 'Oleaut32']

    def _extract_API(self, inputPath):
        common_DLLs = map(lambda x: x.lower(), self.MALWARE_DLL)

        fd = open(inputPath)
        API_freq_dict = dict()

        for line in fd:
            line = line.strip()
            result = re.findall(r'\w*\.\w*\.\w*\.\w*', line)

            for api_name in result:
                parts = api_name.split('.')

                dll_name = parts[-2]
                try:
                    api_name = parts[-1].split('_')[1].lower()
                except:
                    pass

                if dll_name.lower() not in common_DLLs:
                    continue

                if api_name not in API_freq_dict:
                    API_freq_dict[api_name] = 1
                else:
                    API_freq_dict[api_name] += 1

        fd.close()

        return API_freq_dict

    def saveResult(self):
        APIcsUnit.saveResult(self) #if result is None, throw Exception
        resultPath = os.path.join(self.resDir, self.fileName)

        fd = open(resultPath+'.'+self.symbol, 'w')

        resultAPI = [self.fileName]

        for key in self.result.keys():
            resultAPI.append('%s:%d' % (key, self.result[key]))

        fd.write(' '.join(resultAPI))

        fd.close()

    def fit_transform(self, inputPath):
        self.fileName = os.path.basename(inputPath).split('.')[0]

        APIcs = self._extract_API(inputPath)

        self.result = APIcs

        return APIcs


if __name__ == '__main__':
    APIcs()
