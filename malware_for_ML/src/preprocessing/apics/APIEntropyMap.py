from preprocessing.apics.APIcsUnit import APIcsUnit
import numpy as np
import os
import re


class APIEntropyMap(APIcsUnit):
    def __init__(self):
        APIcsUnit.__init__(self, self.__class__.__name__)

        self.fileName = None
        self.result = None

        self.WINDOW_SIZE = 100
        self.STEP_SIZE = 50
        self.HIST_SIZE = 8

        self.mapper = dict()
        self._init_mapper()

        self.n_apis = len(self.mapper.keys())

        self.ROW_CUT = np.ceil(float(self.n_apis) / self.HIST_SIZE)
        self.COL_CUT = np.round(float(1) / self.HIST_SIZE, 4)

    def _init_mapper(self):
        resource_path = './apicfg_def.csv'
        fd = open(resource_path)

        id_number = 0

        for line in fd:
            line = line.strip()

            if len(line) < 1:
                continue

            data = line.split(',')

            api_name = data[0].lower()

            self.mapper[api_name] = id_number

            id_number += 1

        fd.close()

    def _extract_API(self, inputPath):
        common_APIs = self.mapper.keys()

        fd = open(inputPath)
        api_call_list = list()

        for line in fd:
            line = line.strip()
            result = re.findall(r'\w*\.\w*\.\w*\.\w*', line)

            for api_name in result:
                parts = api_name.split('.')

                dll_name = parts[-2]
                try:
                    api_name = parts[-1].split('_')[1].lower()
                except:
                    pass

                if api_name.lower() not in common_APIs:
                    continue

                api_call_list.append(self.mapper[api_name])
        fd.close()

        return api_call_list

    def _mapRowIndex(self, val):
        rowIdx = int(val / self.COL_CUT) # 0 ~ 1 -> 0 ~ 15.0

        return rowIdx

    def _mapColIndex(self, val):
        colIdx = int(val / self.ROW_CUT)

        return colIdx

    def _mapValue(self, entropy_list):#, histogram_list):
        entropyMatrix = np.zeros((self.HIST_SIZE, self.HIST_SIZE), dtype=int)

        # for entropyVal, api_frequency in zip(entropy_list, histogram_list):
        for entropyVal in entropy_list:
            for api_idx in range(self.n_apis):
                rowIdx = self._mapRowIndex(entropyVal[api_idx])
                colIdx = self._mapColIndex(api_idx)

                entropyMatrix[rowIdx,colIdx] += 1

        return entropyMatrix

    def _getEntropy(self, api_frequency):
        if api_frequency <= 0:
            return 0.0

        entropyVal = -(np.log(api_frequency) * api_frequency)

        return entropyVal

    def _slide_window(self, api_call_sequence):
        entropy_list = list()
        histogram_list = list()

        # for i in range(0, len(api_call_sequence) - self.WINDOW_SIZE +1, self.STEP_SIZE):
        for i in range(1):
            # api_window = api_call_sequence[i:i+self.WINDOW_SIZE]
            api_window = api_call_sequence[:]
            api_window = np.array(api_window)

            api_frequency = np.histogram(api_window, bins=self.n_apis)[0]
            entropyFreq = (api_frequency / float(np.sum(api_frequency)+ 1e-10))
            entropyFreq = map(lambda x:self._getEntropy(x), entropyFreq)

            histogram_list.append(api_frequency)
            entropy_list.append(entropyFreq)

        # return (entropy_list, histogram_list)
        return (entropy_list)

    def saveResult(self):
        APIcsUnit.saveResult(self) #if result is None, throw Exception
        resultPath = os.path.join(self.resDir, self.fileName)

        res = self.result
        res = res.reshape(1,-1).flatten()

        fd = open(resultPath+'.'+self.symbol, 'w')
        resContents = [self.fileName]

        for i in range(len(res)):
            if res[i] == 0:
                continue

            resContents.append('%d:%d'%(i+1, res[i]))

        fd.write(' '.join(resContents))
        fd.close()

    def fit_transform(self, inputPath):
        self.fileName = os.path.basename(inputPath).split('.')[0]

        api_call_list = self._extract_API(inputPath)
        # (entropy_list, histogram_list) = self._slide_window(api_call_list)
        (entropy_list) = self._slide_window(api_call_list)
        # print entropy_list, histogram_list
        api_entropy_map = self._mapValue(entropy_list)#, histogram_list)

        self.result = api_entropy_map

        return self.result
