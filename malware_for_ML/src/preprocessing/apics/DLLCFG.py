from preprocessing.apics.APIcsUnit import APIcsUnit
import os
import re
import numpy as np

class DLLCFG(APIcsUnit):
    def __init__(self):
        APIcsUnit.__init__(self, self.__class__.__name__)

        self.fileName = None
        self.result = None

        self.mapper = dict()
        self._init_mapper()

    def _init_mapper(self):
        resource_path = './Top_DLL_used.csv'
        fd = open(resource_path)

        cnt = 0
        for line in fd:

            if cnt > 15:
                break

            line = line.strip()

            if len(line) < 1:
                continue

            data = line.split(',')

            self.mapper[data[0].upper()] = cnt
            cnt += 1

        fd.close()

    def _extract_call_sequence(self, inputPath):
        dll_list = self.mapper.keys()

        fd = open(inputPath)
        DLL_sequence_list = list()

        for line in fd:
            line = line.strip()
            result = re.findall(r'\w*\.\w*\.\w*\.\w*', line)

            for api_name in result:
                parts = api_name.split('.')

                dll_name = parts[-2].upper()
                try:
                    api_name = parts[-1].split('_')[1].lower()
                except:
                    pass

                if dll_name not in dll_list:
                    continue

                DLL_sequence_list.append(dll_name)

        fd.close()

        return DLL_sequence_list

    def _makeCFG(self, DLLcs):
        no_dll = len(self.mapper.keys())
        DLL_CFG_freq_dict = np.zeros((no_dll,no_dll))

        for idx in range(len(DLLcs)-1):
            DLL_2gram = DLLcs[idx:idx+2]
            DLL_2gram = '(%s)'%','.join(DLL_2gram)

            DLL_CFG_freq_dict[self.mapper[DLL_2gram[0]], self.mapper[DLL_2gram[1]]] += 1

        return DLL_CFG_freq_dict

    def saveResult(self):
        APIcsUnit.saveResult(self) #if result is None, throw Exception
        resultPath = os.path.join(self.resDir, self.fileName)

        fd = open(resultPath+'.'+self.symbol, 'w')

        resultAPI = [self.fileName]
        self.result = self.result.reshape(1,-1)

        for key in range(self.result.shape[0]):
            resultAPI.append('%s:%d' % (key, self.result[key]))

        fd.write(' '.join(resultAPI))

        fd.close()

    def fit_transform(self, inputPath):
        self.fileName = os.path.basename(inputPath).split('.')[0]

        dll_sequence = self._extract_call_sequence(inputPath)
        DLL_CFG_freq_dict = self._makeCFG(dll_sequence)
        self.result = DLL_CFG_freq_dict

        return DLL_CFG_freq_dict

