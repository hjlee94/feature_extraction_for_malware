from preprocessing.apics.APIcsUnit import APIcsUnit
import os
import re


class APIDLLfreq(APIcsUnit):
    def __init__(self):
        APIcsUnit.__init__(self, self.__class__.__name__)

        self.fileName = None
        self.result = None
        self.filter = list()

        self._init_filter()

    def _init_filter(self):
        resource_path = './Top_DLL_used.csv'
        fd = open(resource_path)

        cnt = 0
        for line in fd:

            if cnt > 15:
                break

            line = line.strip()

            if len(line) < 1:
                continue

            data = line.split(',')

            self.filter.append(data[0])

            cnt += 1

        fd.close()

    def _extract_call_sequence(self, inputPath):
        fd = open(inputPath)
        API_freq_dict = dict()

        for line in fd:
            line = line.strip()
            result = re.findall(r'\w*\.\w*\.\w*\.\w*', line)

            for api_name in result:
                parts = api_name.split('.')

                dll_name = parts[-2]
                try:
                    api_name = parts[-1].split('_')[1].upper()
                except:
                    pass

                if dll_name not in self.filter:
                    continue

                if api_name not in API_freq_dict:
                    API_freq_dict[api_name] = 1
                else:
                    API_freq_dict[api_name] += 1

        fd.close()

        return API_freq_dict

    def saveResult(self):
        APIcsUnit.saveResult(self) #if result is None, throw Exception
        resultPath = os.path.join(self.resDir, self.fileName)

        fd = open(resultPath+'.'+self.symbol, 'w')

        resultAPI = [self.fileName]

        for key in self.result.keys():
            resultAPI.append('%s:%d' % (key, self.result[key]))

        fd.write(' '.join(resultAPI))

        fd.close()

    def fit_transform(self, inputPath):
        self.fileName = os.path.basename(inputPath).split('.')[0]

        APIcs = self._extract_call_sequence(inputPath)
        self.result = APIcs

        return APIcs
