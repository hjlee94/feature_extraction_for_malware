'''
This code is manager of preprocessing.
it decides which feature will be used and target which is processed.

'''

from bytes import *
from preprocessing.binary import *
from preprocessing.asm import *
from preprocessing.json import *
from preprocessing.apics import *
from errorcode.Exceptions import *
from tqdm import tqdm
import pickle
import numpy as np
import argparse
import glob
import os
import time
import sys

class FeatureManager:
    def __init__(self, inputPath, featureList):
        self.inputPath = inputPath
        self.featureList = featureList
        self.featureEncoder = dict()
        self.symbolTable = dict()
        self.initSymbolTable()
        self.pathList = list()

    # decide which feature will be used.
    def initSymbolTable(self):
        # Bytes files
        self.symbolTable['SingleByteFreq'] = SingleByteFreq.SingleByteFreq
        self.symbolTable['FullGram'] = FullGram.FullGram

        # Binary
        # self.symbolTable['BfimfVector'] = BfimfVector.BfimfVector
        self.symbolTable['ByteHistogram'] = ByteHistogram.ByteHistogram
        # self.symbolTable['ByteEntropyArr'] = ByteEntropyArr.ByteEntropyArr
        # self.symbolTable['ByteEntropyMatrix2D'] = ByteEntropyMatrix2D.ByteEntropyMatrix2D
        # self.symbolTable['IntegratedByteEntropy'] = IntegratedByteEntropy.IntegratedByteEntropy
        self.symbolTable['ByteEntropyMap'] = ByteEntropyMap.ByteEntropyMap
        self.symbolTable['WindowEntropyMap'] = WindowEntropyMap.WindowEntropyMap
        self.symbolTable['GramCFG'] = GramCFG.GramCFG
        self.symbolTable['Ngram'] = Ngram.Ngram
        self.symbolTable['EntropyImage'] = EntropyImage.EntropyImage

        # ASM files
        # self.symbolTable['HistImport'] = HistImport.HistImport
        self.symbolTable['SegCnt'] = SegCnt.SegCnt
        self.symbolTable['InstCnt'] = InstCnt.InstCnt
        self.symbolTable['APIASM'] = APIASM.APIASM
        self.symbolTable['OPgramCFG'] = OPgramCFG.OPgramCFG


        #JSON files
        self.symbolTable['ApiMalware'] = ApiMalware.ApiMalware

        #apics files
        self.symbolTable['APIcs'] = APIcs.APIcs
        self.symbolTable['APIcs2'] = APIcs2.APIcs2
        self.symbolTable['APICFG'] = APICFG.APICFG
        self.symbolTable['DLLCFG'] = DLLCFG.DLLCFG
        self.symbolTable['APIAPIfreq'] = APIAPIfreq.APIAPIfreq
        self.symbolTable['APIDLLfreq'] = APIDLLfreq.APIDLLfreq
        self.symbolTable['CategoryCFG'] = CategoryCFG.CategoryCFG
        self.symbolTable['FrequentAPICFG'] = FrequentAPICFG.FrequentAPICFG
        self.symbolTable['APIEntropyMap'] = APIEntropyMap.APIEntropyMap

    def getAvailableProcessor(self):
        pList = list()

        for featureName in self.featureList:
            if featureName not in self.symbolTable:
                print '[ERROR] There is no %s feature in symbolTable'%featureName
                continue

            pList.append(self.symbolTable[featureName])

        return pList

    def getSymbolTable(self):
        return self.symbolTable

    def retrieve(self, inputPath):
        print '[INFO] retrieving [%s]'%inputPath
        inputPath = os.path.join(inputPath, '*')
        fileList = glob.glob(inputPath)

        inputList = list()

        for path in fileList:
            if os.path.isdir(path):
                inputList += self.retrieve(path)
            else:
                inputList.append(path)

        return inputList

    def extract_units(self):
        inputList = self.retrieve(self.inputPath)
        pathList = list()

        if len(inputList) <= 0:
            print '[ERROR] No input data exists.'
            sys.exit(0)

        print '[INFO] %d input data is detected' % len(inputList)

        pList = self.getAvailableProcessor()
        for pUnit in pList:
            pUnit = pUnit()

            print '[INFO] %s extraction'%pUnit.getSymbol()
            for inputPath in tqdm(inputList, unit='B'):
                try:
                    pUnit.fit_transform(inputPath)
                    pUnit.saveResult()

                except NoResultException as nre:
                    print nre

                except NoFileNameException as nfe:
                    print nfe

            pathList.append(pUnit.getResDir())

        self.pathList = pathList

    def collect(self):
        for path in self.pathList:
            print '[INFO] %s collect'%(path.split(os.path.sep)[-1])
            fdw = open(path+'.spa','w')

            dataPathList = glob.glob(os.path.join(path,'*'))

            for dataPath in tqdm(dataPathList, unit='B'):
                fd = open(dataPath)
                fdw.write(fd.readline() + '\n')
                fd.close()

        fdw.close()
