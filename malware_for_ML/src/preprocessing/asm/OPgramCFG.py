from preprocessing.asm.AsmUnit import AsmUnit
import os
import numpy as np

class OPgramCFG(AsmUnit):
    def __init__(self):
        AsmUnit.__init__(self, self.__class__.__name__)

        self.instDict = {'add':0,'mov':1,'push':2,'call':3,'pop':4,'inc':5,'cmp':6,'xor':7,'dec':8,'je':9,'lea':10,
                         'test':11,'int3':12,'jmp':13,'sub':14,'nop':15,'and':16,'or':17,'ret':18,'jne':19,'adc':20,
                         'xchg':21,'sbb':22,'imul':23,'jb':24,'out':25,'in':26,'jae':27,'outsd':28,'outsb':29,'popal':30,
                         'movzx':31}

        self.result = None
        self.fileName = None

    def _getInstSeq(self, inputPath):
        OP_sequence = list()
        fd = open(inputPath)

        for line in fd:
            line = line.strip()

            line = line.split()
            inst = line[0]

            if inst not in self.instDict:
                continue

            OP_sequence.append(inst)

        return OP_sequence

    def _cvtNgram(self, OP_sequence, N=2):
        gramSequence = list()

        for idx in range(len(OP_sequence)-N-1):
            tmp = OP_sequence[idx:idx+N]
            gram = ','.join(tmp)
            gramSequence.append(gram)

        return gramSequence

    def _generateCFG(self, gramSequence):
        gramCFG = np.zeros((32,32), dtype=int)

        for gram in gramSequence:
            parts = gram.split(',')

            part0 = self.instDict[parts[0]]
            part1 = self.instDict[parts[1]]

            gramCFG[part0,part1] += 1

        return gramCFG

    def saveResult(self):
        AsmUnit.saveResult(self)  # if result is None, throw Exception
        resultPath = os.path.join(self.resDir, self.fileName)

        res = self.result
        res = res.reshape(1,-1).flatten()

        fd = open(resultPath+'.'+self.symbol, 'w')
        resultInst = [self.fileName]

        for i in range(len(res)):
            resultInst.append('%s:%d' % (i+1, res[i]))

        fd.write(' '.join(resultInst))
        fd.close()

    def fit_transform(self, inputPath):
        self.fileName = os.path.basename(inputPath).split('.')[0]

        OP_sequence = self._getInstSeq(inputPath)
        gramSequence = self._cvtNgram(OP_sequence)
        gramCFG = self._generateCFG(gramSequence)

        self.result = gramCFG

        return self.result

