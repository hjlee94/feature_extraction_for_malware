from preprocessing.asm.AsmUnit import AsmUnit
import os

class InstCnt(AsmUnit):
    def __init__(self):
        AsmUnit.__init__(self, self.__class__.__name__)

        self.instSet = {'push','pop','mov','lea','inc','dec','add',
                        'sub','call','ret','cmp','jmp','int','nop'}

        self.instCntDict = dict()
        self.result = None
        self.fileName = None

    def _getInstCnt(self, inputPath):
        fd = open(inputPath)

        for line in fd:
            line = line.strip()
            line = line.split()

            for unit in line:
                unit = unit.lower()

                if unit in self.instSet:
                    if unit not in self.instCntDict:
                        self.instCntDict[unit] = 1
                    else:
                        self.instCntDict[unit] += 1

        return self.instCntDict

    def saveResult(self):
        AsmUnit.saveResult(self)  # if result is None, throw Exception
        resultPath = os.path.join(self.resDir, self.fileName)

        fd = open(resultPath+'.'+self.symbol, 'w')
        resultInst = [self.fileName]
        for key in self.result.keys():
            resultInst.append('%s:%d' % (key, self.result[key]))

        fd.write(' '.join(resultInst))
        fd.close()

    def fit_transform(self, inputPath):
        self.fileName = os.path.basename(inputPath).split('.')[0]

        instCntDict = self._getInstCnt(inputPath)
        self.result = instCntDict


