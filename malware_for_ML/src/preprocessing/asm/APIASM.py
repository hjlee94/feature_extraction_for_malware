from preprocessing.asm.AsmUnit import AsmUnit
import os


class APIASM(AsmUnit):
    def __init__(self):
        AsmUnit.__init__(self, self.__class__.__name__)

        self.fileName = None
        self.result = None

        self.MALWARE_DLL = ['User32.dll', 'Kernel32.dll', 'Advapi32.dll', 'Ntdll.dll', 'Ws2_32.dll', 'Wininet.dll',
                            'wsock32.dll', 'Shell32.dll', 'Msvcrt.dll', 'Ole32.dll', 'Oleaut32.dll']

        self.PREFIX = '__imp_'

    def _extractIAT(self, inputPath):
        fd = open(inputPath)
        import_dict = dict()

        for line in fd:
            line = line.strip()

            if line[:6] != '.idata':
                continue

            line = line.split()

            if 'Imports' in line:
                dllName = line[line.index('Imports') + 2].upper()
                import_dict[dllName] = list()


            elif 'extrn' in line:
                funcName = line[line.index('extrn') + 1].split(':')[0]
                try:
                    import_dict[dllName].append(funcName)
                except:
                    pass


        fd.close()

        return import_dict

    def _filter(self, import_dict):
        api_dict = dict()

        for key in import_dict.keys():
            common_DLLs = map(lambda x:x.upper(), self.MALWARE_DLL)

            if key not in common_DLLs:
                continue

            api_list = import_dict[key]

            for api in api_list:
                if self.PREFIX in api:
                    api = api[api.index(self.PREFIX)+len(self.PREFIX):]

                api_dict[api] = 1

        return api_dict

    def saveResult(self):
        AsmUnit.saveResult(self) #if result is None, throw Exception
        resultPath = os.path.join(self.resDir, self.fileName)

        fd = open(resultPath+'.'+self.symbol, 'w')
        for key in self.result.keys():
            fd.write('%s,%s,%s'%(key,','.join(self.result[key])))
        fd.close()

    def fit_transform(self, inputPath):
        self.fileName = os.path.basename(inputPath).split('.')[0]

        importList = self._extractIAT(inputPath)
        api_list = self._filter(importList)

        self.result = api_list

        return api_list


if __name__ == '__main__':
    APIASM()
