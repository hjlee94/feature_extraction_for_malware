from preprocessing.asm.AsmUnit import AsmUnit
from util.util import customHash
import os


class HistImport(AsmUnit):
    def __init__(self):
        AsmUnit.__init__(self, self.__class__.__name__)

        self.fileName = None
        self.result = None

        self.RANGE = 256

    def _extractIAT(self, inputPath):
        fd = open(inputPath)
        importList = list()

        for line in fd:
            line = line.strip()

            if line[:6] != '.idata':
                continue

            line = line.split()

            if 'Imports' in line:
                dllName = line[line.index('Imports') + 2].split('.')[0]
                importList.append(dllName)

            elif 'extrn' in line:
                funcName = line[line.index('extrn') + 1].split(':')[0]
                importList.append(funcName)

        fd.close()

        return importList

    def _getHashVector(self, importList):
        vector = [0 for x in range(self.RANGE)]

        for name in importList:
            idx = customHash(name, self.RANGE)
            vector[idx] += 1

        return vector

    def saveResult(self):
        AsmUnit.saveResult(self) #if result is None, throw Exception
        resultPath = os.path.join(self.resDir, self.fileName)

        self.result = map(lambda x:str(x), self.result)

        fd = open(resultPath+'.'+self.symbol, 'w')
        fd.write(' '.join([self.fileName] + self.result))
        fd.close()

    def fit_transform(self, inputPath):
        self.fileName = os.path.basename(inputPath).split('.')[0]

        importList = self._extractIAT(inputPath)
        vector = self._getHashVector(importList)

        self.result = vector

        return vector


if __name__ == '__main__':
    HistImport()
