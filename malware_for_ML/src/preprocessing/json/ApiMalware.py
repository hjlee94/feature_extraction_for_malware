from JsonUnit import JsonUnit
import os
import json

class ApiMalware(JsonUnit):
    def __init__(self):
        JsonUnit.__init__(self, self.__class__.__name__)

        self.MALWARE_DLL = ['User32.dll','Kernel32.dll','Advapi32.dll','Ntdll.dll', 'Ws2_32.dll','Wininet.dll',
                       'wsock32.dll','Shell32.dll','Msvcrt.dll','Ole32.dll','Oleaut32.dll']
        self.MALWARE_DLL = map(lambda x: x.upper(), self.MALWARE_DLL)

        self.api_set = None
        self.fileName = None
        self.result = None

    def _read_json(self, jsonPath):
        with open(jsonPath) as data_file:
            data = json.load(data_file)

        return data

    def _getBagOfWord(self, inputList):
        api_set = set()

        for inputPath in inputList:
            jsonData = self._read_json(inputPath)
            addInfo = jsonData['additional_info']

            if 'imports' not in addInfo.keys():
                continue

            IAT = addInfo['imports']

            api_list = list()

            for dll in IAT.keys():
                if dll.upper() not in self.MALWARE_DLL:
                    continue

                api_list += IAT[dll]

            api_list = map(lambda x:x.upper(), api_list)

            api_set = api_set.union(set(api_list))

        return api_set

    def fit(self, inputList):
        self.api_set = self._getBagOfWord(inputList)

    def _mark(self, inputPath):
        featureDict = dict()

        jsonData = self._read_json(inputPath)
        addInfo = jsonData['additional_info']

        if 'imports' not in addInfo.keys():
            return featureDict

        IAT = addInfo['imports']

        api_list = list()

        for dll in IAT.keys():
            if dll.upper() not in self.MALWARE_DLL:
                continue

            api_list += IAT[dll]

        api_list = map(lambda x: x.upper(), api_list)

        for api in api_list:
            # if api not in self.api_set:
            #     continue

            if api not in featureDict:
                featureDict[api] = 1
            else:
                featureDict[api] += 1

        return featureDict

    def transform(self, inputPath):
        if self.api_set is None:
            print 'you sould fit first'
            return None

        self.fileName = os.path.basename(inputPath).split('.')[0]

        featureDict = self._mark(inputPath)

        self.result = featureDict

        return self.result

    def fit_transform(self, inputPath):
        self.fileName = os.path.basename(inputPath).split('.')[0]

        featureDict = self._mark(inputPath)

        self.result = featureDict

        return self.result

    def saveResult(self):
        JsonUnit.saveResult(self) #if result is None, throw Exception
        resultPath = os.path.join(self.resDir,self.fileName)

        fd = open(resultPath+'.apimal', 'w')
        feature = [self.fileName]

        for key in self.result.keys():
            feature.append('%s:%d'%(key, self.result[key]))

        fd.write(' '.join(feature))
        fd.close()