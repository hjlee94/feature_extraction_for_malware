from preprocessing.binary.BinaryUnit import BinaryUnit
from ByteEntropyArr import ByteEntropyArr
import numpy as np
import os


class IntegratedByteEntropy(BinaryUnit):
    def __init__(self):
        BinaryUnit.__init__(self, self.__class__.__name__)

        self.BYTE_SIZE = 256

        self.fileName = None
        self.result = None


    def _integrate(self, byteEntropyArr):
        byteEntropyMat = byteEntropyArr.reshape(-1, self.BYTE_SIZE)
        integratedEntropy =np.mean(byteEntropyMat, axis=0)

        return integratedEntropy


    def saveResult(self):
        BinaryUnit.saveResult(self) #if result is None, throw Exception
        resultPath = os.path.join(self.resDir,self.fileName)

        fd = open(resultPath+'.'+self.symbol, 'w')
        resContents = [self.fileName]

        for i in range(len(self.result)):
            resContents.append('%d:%f'%(i+1, self.result[i]))

        fd.write(' '.join(resContents))
        fd.close()

    def fit_transform(self, inputPath):
        self.fileName = os.path.basename(inputPath).split('.')[0]

        byteEntropyArr = ByteEntropyArr().fit_transform(inputPath)
        byteEntropyArr = np.array(byteEntropyArr)
        self.result = self._integrate(byteEntropyArr)

        return self.result
