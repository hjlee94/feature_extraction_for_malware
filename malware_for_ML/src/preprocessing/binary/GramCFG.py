from BinaryUnit import BinaryUnit
import os
import numpy as np

class GramCFG(BinaryUnit):
    def __init__(self):
        BinaryUnit.__init__(self, self.__class__.__name__)

        self.N = 2

        self.fileName = None
        self.result = None

    def _cvtNgram(self, byteSeq):
        N = self.N
        gramList = list()

        for idx in range(len(byteSeq)-N-1):
            tmp = byteSeq[idx:idx+N]
            tmp = map(lambda x: hex(x)[2:].upper(), tmp)
            gram = ' '.join(tmp)

            gramList.append(gram)

        return gramList

    def _generateCFG(self, gramList):
        gramCFG = np.zeros((256,256))

        for gram in gramList:
            parts = gram.split()
            parts = map(lambda x:int(x, 16), parts)

            gramCFG[parts[0], parts[1]] += 1

        return gramCFG

    def _extractByteSeq(self, inputPath):
        fd = open(inputPath, 'rb')

        byteSequence = map(ord, fd.read())

        return byteSequence

    def saveResult(self):
        BinaryUnit.saveResult(self) #if result is None, throw Exception
        resultPath = os.path.join(self.resDir,self.fileName)

        res = self.result
        res = res.reshape(1,-1).flatten()

        fd = open(resultPath+'.'+self.symbol, 'w')
        resContents = [self.fileName]

        for i in range(len(res)):
            resContents.append('%d:%d'%(i+1, res[i]))

        fd.write(' '.join(resContents))
        fd.close()

    def fit_transform(self, inputPath):
        self.fileName = os.path.basename(inputPath).split('.')[0]

        byteSequence = self._extractByteSeq(inputPath)
        gramList = self._cvtNgram(byteSequence)
        gramCFG = self._generateCFG(gramList)

        self.result = gramCFG

        return self.result
