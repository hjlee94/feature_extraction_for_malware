from BinaryUnit import BinaryUnit
import os

class Ngram(BinaryUnit):
    def __init__(self):
        BinaryUnit.__init__(self, self.__class__.__name__)

        self.fileName = None
        self.result = None

    def _cvtNgram(self, byteSeq, N=2):
        gramDict = dict()
        for idx in range(len(byteSeq)-N):
            tmp = byteSeq[idx:idx+N]
            tmp = map(lambda x: hex(x)[2:].upper(), tmp)
            gram = ''.join(tmp)

            if gram in gramDict:
                gramDict[gram] += 1
            else:
                gramDict[gram] = 1

        return gramDict

    def _extractByteSeq(self, inputPath):
        fd = open(inputPath, 'rb')

        byteSequence = map(ord, fd.read())

        return byteSequence

    def saveResult(self):
        BinaryUnit.saveResult(self) #if result is None, throw Exception
        resultPath = os.path.join(self.resDir,self.fileName)

        fd = open(resultPath+'.'+self.symbol, 'w')
        resultGram = [self.fileName]

        for key in self.result.keys():
            resultGram.append('%s:%d'%(key, self.result[key]))

        fd.write(' '.join(resultGram))
        fd.close()

    def fit_transform(self, inputPath):
        self.fileName = os.path.basename(inputPath).split('.')[0]

        byteSequence = self._extractByteSeq(inputPath)
        gramDict = self._cvtNgram(byteSequence)

        self.result = gramDict

        return self.result
